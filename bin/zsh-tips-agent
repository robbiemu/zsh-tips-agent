#!/usr/bin/env bash
set -euo pipefail

# ---- Functions ----

usage() {
  cat <<EOF >&2
Usage: zsh-tips-agent [--prefix <path>] <command> [options]

Commands:
  install                 Install zsh-tips-agent (default prefix: /usr/local)
  init [--apply|--print]  Add or display the snippet for ~/.zshrc
  help                    Show this message

Options:
  --prefix <path>         Installation prefix (default: /usr/local)

EOF
  exit 1
}

cmd_install() {
  echo "Installing zsh-tips-agent..."
  echo "  Source directory: $SCRIPT_DIR"
  echo "  Target lib directory: $LIB_DIR"

  mkdir -p "$LIB_DIR"

  # Copy everything to lib directory
  cp -r "$SCRIPT_DIR/bin" "$LIB_DIR/"
  cp -r "$SCRIPT_DIR/agent" "$LIB_DIR/"
  [[ -f "$SCRIPT_DIR/pyproject.toml" ]] && cp "$SCRIPT_DIR/pyproject.toml" "$LIB_DIR/"
  echo "  ✓ Installed library files to $LIB_DIR"

  # Set up Python virtual environment
  if command -v uv >/dev/null 2>&1; then
    echo "  Creating Python virtual environment with uv..."
    uv venv "$LIB_DIR/.venv" || {
      echo "  ❌ Error: uv failed to create a virtual environment."
      echo "  Please update uv: pip install --upgrade uv"
      echo "  See https://github.com/astral-sh/uv for more info."
      exit 1
    }
    VENV_PY="$LIB_DIR/.venv/bin/python"
    VENV_PIP="$LIB_DIR/.venv/bin/uv pip"
  elif command -v python3 >/dev/null 2>&1; then
    echo "  Creating Python virtual environment with python3..."
    python3 -m venv "$LIB_DIR/.venv" || {
      echo "  ❌ Error: python3 failed to create a virtual environment."
      echo "  This is usually due to a missing ensurepip or a broken Python install."
      echo "  On macOS, try: brew install python"
      echo "  Or install uv: pip install uv"
      echo "  See https://github.com/astral-sh/uv for more info."
      exit 1
    }
    VENV_PY="$LIB_DIR/.venv/bin/python"
    VENV_PIP="$LIB_DIR/.venv/bin/pip"
  else
    echo "  ❌ Error: Neither uv nor python3 was found."
    echo "  Please install Python 3.8+ or uv: pip install uv"
    exit 1
  fi

  # Install dependencies
  if [[ -f "$LIB_DIR/pyproject.toml" ]]; then
    if command -v uv >/dev/null 2>&1; then
      (cd $LIB_DIR && uv pip install -e .) || {
        echo "  ⚠️  Warning: Failed to install Python dependencies with uv."
        echo "     Try manually: uv pip install -e $LIB_DIR"
      }
    else
      (cd $LIB_DIR && ".venv/bin/pip" install -e .) || {
        echo "  ⚠️  Warning: Failed to install Python dependencies."
        echo "     Try manually: $LIB_DIR/.venv/bin/pip install -e $LIB_DIR"
      }
    fi
  else
    echo "  ⚠️  No pyproject.toml found, skipping Python setup"
  fi

  if [[ "$PREFIX" != "$DEFAULT_PREFIX" ]]; then
    INIT_CMD="zsh-tips-agent init --prefix \"$PREFIX\" --print"
    APPLY_CMD="zsh-tips-agent init --prefix \"$PREFIX\" --apply"
  else
    INIT_CMD="zsh-tips-agent init --print"
    APPLY_CMD="zsh-tips-agent init --apply"
  fi

  echo "✅ Installation complete!"
  echo
  echo "To enable zsh-tips-agent, add this to your ~/.zshrc:"
  echo
  echo "  eval \"\$($INIT_CMD)\""
  echo
  echo "Or run: $APPLY_CMD"
}


cmd_init() {
SNIPPET=$(cat <<EOF
# ---- zsh-tips-agent ----
TIPS_AGENT_DIR="\${TIPS_AGENT_DIR:-$LIB_DIR}"
DATA_DIR="\$HOME/.local/share/zsh-tips-agent/data"
TIP_CACHE_FILE="\$DATA_DIR/current_tip.txt"
UPDATE_SCRIPT="\$TIPS_AGENT_DIR/bin/update_tip_cache.sh"
ZSH_TIPS_AGENT_LOG="\$HOME/.local/share/zsh-tips-agent/last-run.log"
TIP_AGE_HOURS=2

tip_is_fresh() {
  [[ ! -f "\$TIP_CACHE_FILE" ]] && return 1
  now=\$(date +%s)
  filetime=\$(stat -f %m "\$TIP_CACHE_FILE" 2>/dev/null || stat -c %Y "\$TIP_CACHE_FILE" 2>/dev/null)
  (( ((now - filetime)/3600) < TIP_AGE_HOURS ))
}

[[ -f "\$TIP_CACHE_FILE" ]] && cat "\$TIP_CACHE_FILE"

if ! tip_is_fresh; then
  if [[ -x "\$UPDATE_SCRIPT" ]]; then
    { 
      echo "--- Running update_tip_cache.sh at \$(date) ---" >> "\$ZSH_TIPS_AGENT_LOG"
      PROJECT_DIR="\$TIPS_AGENT_DIR" "\$UPDATE_SCRIPT" >> "\$ZSH_TIPS_AGENT_LOG" 2>&1
      echo "--- Finished update_tip_cache.sh ---" >> "\$ZSH_TIPS_AGENT_LOG"
    } & 2>/dev/null
  fi
fi
# ---- /zsh-tips-agent ----
EOF
)


  case "${1:-}" in
    --print)
      echo "$SNIPPET"
      exit 0
      ;;
    --apply|"")
      ZSHRC="$HOME/.zshrc"
      if ! grep -q 'zsh-tips-agent ----' "$ZSHRC" 2>/dev/null; then
        printf "\n%s\n" "$SNIPPET" >> "$ZSHRC"
        echo "✅ Added zsh-tips-agent snippet to $ZSHRC"
      else
        echo "ℹ️  zsh-tips-agent snippet already present in $ZSHRC"
      fi
      ;;
    *)
      echo "Unknown option: $1" >&2
      usage
      ;;
  esac
}

# ---- End of function definitions ----

# ---- Set Paths & Parse Global Arguments ----

# Default installation prefix
DEFAULT_PREFIX="/usr/local"
PREFIX="$DEFAULT_PREFIX"

# Source directory (project root - parent of the directory containing this script)
SCRIPT_PATH="${BASH_SOURCE[0]}"
while [[ -L "$SCRIPT_PATH" ]]; do
  SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
done
SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_PATH")/.." && pwd)"

# Parse --prefix anywhere in the command line AND remove it from args
# This loop handles global options before command dispatch
POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  case "$1" in
    --prefix)
      PREFIX="$2"
      shift 2 # Consume --prefix and its value
      ;;
    --) # End of options
      shift # Consume --
      POSITIONAL_ARGS+=("$@") 
      set -- "${POSITIONAL_ARGS[@]}"
      break
      ;;
    *) # Not a global option, so it must be the command or its args
      POSITIONAL_ARGS+=("$1")
      shift
      ;;
  esac
done
set -- "${POSITIONAL_ARGS[@]}" # Update $@ with cleaned args

# Set derived paths after parsing arguments
LIB_DIR="$PREFIX/lib/zsh-tips-agent"

# ---- Dispatch Commands ----
case "${1:-help}" in # Now $1 should correctly be the command
  install) shift; cmd_install "$@" ;;
  init)    shift; cmd_init "$@" ;;
  help|--help|-h) usage ;;
  *) 
    echo "Unknown command: $1" >&2
    usage 
    ;;
esac
